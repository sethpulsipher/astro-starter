---
interface Props {
  title?: string;
  subtitle?: string;
  action?: string;
  method?: string;
}

const { 
  title = "Get In Touch",
  subtitle = "Ready to get started? Send us a message and we'll get back to you as soon as possible.",
  action = "/contact",
  method = "POST"
} = Astro.props;
---

<section id="contact-form" class="contact-form-section">
  <div class="container">
    <div class="content">
      <span class="topper">Contact Us</span>
      <h2 class="title">{title}</h2>
      <p class="text">{subtitle}</p>
    </div>
    
    <form class="contact-form" action={action} method={method}>
      <div class="form-group">
        <label for="name">Full Name *</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          required 
          placeholder="Your full name"
        />
      </div>
      
      <div class="form-group">
        <label for="email">Email Address *</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required 
          placeholder="your.email@example.com"
        />
      </div>
      
      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input 
          type="tel" 
          id="phone" 
          name="phone" 
          placeholder="(123) 456-7890"
        />
      </div>
      
      <div class="form-group">
        <label for="service">Service Interest</label>
        <select id="service" name="service">
          <option value="">Select a service</option>
          <option value="consulting">Professional Consulting</option>
          <option value="digital">Digital Solutions</option>
          <option value="support">Business Support</option>
          <option value="other">Other</option>
        </select>
      </div>
      
      <div class="form-group full-width">
        <label for="message">Message *</label>
        <textarea 
          id="message" 
          name="message" 
          required 
          rows="5"
          placeholder="Tell us about your project or how we can help you..."
        ></textarea>
      </div>
      
      <div class="form-group full-width">
        <button type="submit" class="button-solid">
          Send Message
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M8 1L15 8L8 15M15 8H1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </form>
  </div>
</section>

<style lang="less">
/* Mobile - 360px */
@media only screen and (min-width: 0em) {
  .contact-form-section {
    padding: var(--sectionPadding);
    background: #fff;

    .container {
      width: 100%;
      max-width: (800/16rem);
      margin: auto;
    }

    .content {
      text-align: center;
      margin-bottom: (48/16rem);
    }

    .topper {
      margin-bottom: (16/16rem);
    }

    .title {
      margin-bottom: (16/16rem);
    }

    .text {
      max-width: (600/16rem);
      margin: 0 auto;
    }

    .contact-form {
      display: grid;
      grid-template-columns: 1fr;
      gap: (24/16rem);
    }

    .form-group {
      display: flex;
      flex-direction: column;

      &.full-width {
        grid-column: 1 / -1;
      }

      label {
        font-weight: 600;
        margin-bottom: (8/16rem);
        color: var(--headerColor);
      }

      input,
      select,
      textarea {
        padding: (16/16rem);
        border: 2px solid #e1e5e9;
        border-radius: (8/16rem);
        font-size: (16/16rem);
        font-family: inherit;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;

        &:focus {
          outline: none;
          border-color: var(--primary);
          box-shadow: 0 0 0 3px rgba(var(--primary), 0.1);
        }

        &::placeholder {
          color: #9ca3af;
        }
      }

      textarea {
        resize: vertical;
        min-height: (120/16rem);
      }

      select {
        cursor: pointer;
      }
    }

    .button-solid {
      display: inline-flex;
      align-items: center;
      gap: (8/16rem);
      justify-content: center;
      width: 100%;
      padding: (16/16rem) (32/16rem);
      font-size: (16/16rem);
      font-weight: 600;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;

      svg {
        transition: transform 0.3s ease;
      }

      &:hover svg {
        transform: translateX(4px);
      }

      &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }
    }
  }
}

/* Tablet - 768px */
@media only screen and (min-width: 48em) {
  .contact-form-section {
    .contact-form {
      grid-template-columns: repeat(2, 1fr);
      gap: (32/16rem) (24/16rem);
    }
  }
}

/* Desktop - 1024px */
@media only screen and (min-width: 64em) {
  .contact-form-section {
    .container {
      max-width: (900/16rem);
    }
  }
}

/* Dark Mode */
body.dark-mode {
  .contact-form-section {
    background: var(--dark);

    .form-group {
      label {
        color: var(--bodyTextColorWhite);
      }

      input,
      select,
      textarea {
        background: var(--medium);
        border-color: #4a5568;
        color: var(--bodyTextColorWhite);

        &::placeholder {
          color: #a0aec0;
        }

        &:focus {
          border-color: var(--primaryLight);
        }
      }
    }
  }
}
</style>

<script>
// Form submission handling
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('.contact-form') as HTMLFormElement;
  
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalText = submitButton.innerHTML;
      
      // Show loading state
      submitButton.disabled = true;
      submitButton.innerHTML = 'Sending...';
      
      try {
        const formData = new FormData(form);
        
        // Here you would typically send to your backend
        // For now, we'll simulate a successful submission
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Show success message
        submitButton.innerHTML = 'Message Sent!';
        form.reset();
        
        // Reset button after 3 seconds
        setTimeout(() => {
          submitButton.disabled = false;
          submitButton.innerHTML = originalText;
        }, 3000);
        
      } catch (error) {
        console.error('Form submission error:', error);
        submitButton.innerHTML = 'Error - Try Again';
        
        setTimeout(() => {
          submitButton.disabled = false;
          submitButton.innerHTML = originalText;
        }, 3000);
      }
    });
  }
});
</script>