---
import "@styles/sidebar.less";

interface Heading {
  depth: number; // The heading level (h1 = 1, h2 = 2, etc)
  slug: string; // The ID of the heading for linking
  text: string; // The text content of the heading
}

interface Props {
  headings: Heading[]; // Array of headings from your markdown content
  levels?: 1 | 2 | 3; // How many levels of headers to show in TOC (default: 2)
}

const { headings, levels = 2 } = Astro.props as Props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);
---

<h3 class="blog-sidebar_widget-header">On this page</h3>
<ul class="toc-list">
  {
    filteredHeadings.map((heading) => (
      <li class={`toc-item depth-${heading.depth}`}>
        <a href={`#${heading.slug}`} class="toc-link">
          {heading.text}
        </a>
      </li>
    ))
  }
</ul>

<style lang="less">
  .toc-container {
    border-radius: 0.5em;
    border: 1px solid #ebebeb;
    padding: 2.1875em 1.875em;
    margin-bottom: 2rem;
  }

  .toc-list {
    margin-top: 1rem;
    font-size: 0.875rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    list-style: none;
  }

  .toc-item {
    &.depth-2 {
      padding-left: 0.75rem;
    }
    &.depth-3 {
      padding-left: 1.5rem;
    }
    &:has(.toc-current) {
      border-left: 2px solid var(--primaryLight);
      color: var(--primaryLight);
    }
  }

  .toc-link {
    transition: color 0.2s ease-in-out;
    color: var(--bodyTextColor);
    text-decoration: none;
    &.toc-current {
      color: var(--primaryLight);
      font-weight: 700;
    }
    &:hover {
      color: var(--primaryLight);
    }
  }

  @media only screen and (min-width: 64rem) {
    .toc-container {
      margin-bottom: 0;
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0em) {
    body.dark-mode {
      .toc-link {
        color: #f7f7f7;
        &.toc-current {
          color: var(--primaryLight);
        }
        &:hover {
          opacity: 0.8;
        }
      }
    }
  }
</style>

<script>
  // Wrapper for Blog post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: NodeListOf<Element>;
  let isDesktop = window.matchMedia("(min-width: 1024px)").matches;

  // Function that runs when the Intersection Observer fires
  function setCurrent(entries: any[]) {
    const tocWrapper = document.querySelector("#desktop-toc");
    if (!tocWrapper) return;

    const allSectionLinks = tocWrapper.querySelectorAll(".toc-link");

    entries.forEach((entry: { isIntersecting: any; target: { id: any } }) => {
      if (entry.isIntersecting) {
        allSectionLinks.forEach((link) => link.classList.remove("toc-current"));
        const targetLink = tocWrapper.querySelector(
          `a[href="#${entry.target.id}"].toc-link`
        );
        if (targetLink) targetLink.classList.add("toc-current");
      }
    });
  }

  function initTOC() {
    // Check if it's desktop
    if (!window.matchMedia("(min-width: 64rem)").matches) return;

    // update this with whatever class wraps your blog post content
    wrappingElement = document.querySelector("#blog-content");
    if (!wrappingElement) return;

    // Get all H1/H2/H3 tags from the post
    allHeaderTags = wrappingElement.querySelectorAll(
      ":scope > h1, :scope > h2, :scope > h3"
    );
    if (!allHeaderTags.length) return;

    // Intersection Observer Options
    let options = {
      root: null,
      rootMargin: "0px 0px -50% 0px",
      threshold: [1],
    };

    // Create Observer
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    allHeaderTags.forEach((tag) => observeHeaderTags.observe(tag));
  }

  // Run on initial page load if on desktop
  if (isDesktop) initTOC();

  if (window.matchMedia("(min-width: 64rem)").matches) {
    initTOC();
  }

  // Listen for screen size changes
  window.matchMedia("(min-width: 64rem)").addEventListener("change", (e) => {
    if (e.matches) {
      initTOC();
    } else {
      // Clean up observer when switching to mobile
      if (observeHeaderTags) observeHeaderTags.disconnect();
    }
  });
</script>
